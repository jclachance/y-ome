#!/usr/bin/env python3

from yome import Session
from yome.load import load_knowledgebase
from yome.util import apply_keyword

import pandas as pd
from os.path import dirname, realpath, join
import re

# Load knowledgebase into dataframe
directory = realpath(dirname(__file__))

# Load knowledgebase into dataframe
names = ['upid', 'name', 'synonyms', 'locus_id', 'protein', 'ec_number',
         'reaction', 'function', 'annotation_score', 'features', 'misc']
df = pd.read_table(join(directory, 'uniprot_raw.tsv'), sep='\t', header=0,
                   names=names)

# Strip columns
df['name'] = df['name'].str.strip()
df.locus_id = df.locus_id.str.strip()
df.upid = df.upid.str.strip()

# Keep annotation scores as numbers
df.annotation_score = df.annotation_score.map(lambda s: int(s.replace('out of 5', '')))

# Pull out locus IDs
df.locus_id = df.locus_id.apply(lambda s: s.split()[0])

# If primary name is null, use locus ID
def locus_for_name(row):
    return row['locus_id'] if pd.isnull(row['name']) else row['name']
df.name = df.apply(locus_for_name, axis=1)

# Format synonyms
df.synonyms = df.synonyms.map(lambda s: [x.strip() for x in s.split()]
                                        if type(s) is str else [])

# Add annotation_quality
df.loc[:, 'annotation_quality'] = 'tbd'

#add annotation quality scores
low_keywords_protein = [
    'probable', 'uncharacterized', 'putative'
]
low_keywords_function = [
    'unknown', 'not known'
]

# Apply keyword annotations; protein
for keyword in low_keywords_protein:
    apply_keyword(df, keyword, 'protein', False)

# Apply keyword annotations; function
for keyword in low_keywords_function:
    apply_keyword(df, keyword, 'function', False)

# Genes with EC number are high
df.loc[~df.ec_number.isnull(), 'annotation_quality'] = 'high'

# Genes with annotation_score 4 or 5 are high
df.loc[df.annotation_score >= 4, 'annotation_quality'] = 'high'

# Genes with annotation_score 1 or 2 are low
df.loc[df.annotation_score <= 2, 'annotation_quality'] = 'low'

# Import knowledgebase
session = Session()
load_knowledgebase(session, df, 'UniProt',
                   locus_id_column='locus_id',
                   primary_name_column='name',
                   synonyms_column='synonyms',
                   feature_columns=['upid', 'protein', 'ec_number', 'reaction',
                                    'function', 'features', 'misc',
                                    'annotation_score'],
                   annotation_quality_column='annotation_quality')
session.close()

print()
print('UniProt')
print(df.annotation_quality.value_counts())
